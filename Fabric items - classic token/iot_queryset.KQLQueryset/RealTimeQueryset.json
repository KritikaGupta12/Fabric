{"payload":{"tabs":[{"id":"a0ab4745-4273-4498-b35e-41f549357c9c","queryRange":{"startLineNumber":35,"startColumn":1,"endLineNumber":39,"endColumn":1},"text":"// temp min-20 max-31.9\n// hum min 60 max-79.8\nexplain\nSELECT EventProcessedUtcTime,\nCONVERT(smalldatetime, SUBSTRING(EventProcessedUtcTime, 1, 10)) AS EventDate,\nround(CAST(temperature AS decimal(4,3)),3) as Temperature, \nround(CAST(humidity AS decimal(4,3)),3) as Humidity,\nCASE WHEN round(CAST(temperature AS decimal(4,3)),3) > 28 THEN 1 ELSE 0 END as Tempspike,\nCASE WHEN round(CAST(humidity AS decimal(4,3)),3) > 75 THEN 1 ELSE 0 END as Humidityspike\nFROM rasptb\n\nexplain\nSELECT EventProcessedUtcTime, EventEnqueuedUtcTime, round(CAST(spin AS decimal(4,3)),2) as spin,\nCASE WHEN round(CAST(spin AS decimal(4,3)),2) > 140 THEN 1 ELSE 0 END as spinspike\nFROM spintb\n\nCREATE VIEW v_iot\nAS\nSELECT EventProcessedUtcTime, EventEnqueuedUtcTime, round(CAST(spin AS decimal(4,3)),2) as spin,\nCASE WHEN round(CAST(spin AS decimal(4,3)),2) > 140 THEN 1 ELSE 0 END as spinspike\nFROM spintb s \nJOIN rasptb r \non s.EventProcessedUtcTime\n\nrasptb \n| join kind=fullouter spintb on EventEnqueuedUtcTime\n\n// query for the report\nrasptb\n| project EventProcessedUtcTime, EventDate=substring(EventProcessedUtcTime, (int(1) - 1), int(10)), \nTemperature=round(todecimal(temperature), int(3)), Humidity=round(todecimal(humidity), int(3)), \nTempSpike=iff((round(todecimal(temperature), int(3)) > todouble(int(28))), int(1), int(0)), \nHumiditySpike=iff((round(todecimal(humidity), int(3)) > todouble(int(75))), int(1), int(0))\n\nspintb\n| project-rename ['spintb.spin']=spin\n| project EventProcessedUtcTime, EventEnqueuedUtcTime, spin=round(todecimal(['spintb.spin']), int(2)), spinspike=iff((round(todecimal(['spintb.spin']), int(2)) > todouble(int(140))), int(1), int(0))\n\n// ----------------------------\n\n// -- deleting records for 2024-12-09\nselect count(*) from rasptb where cast(EventProcessedUtcTime as varchar) like '2024-12-12%';\n\n// dry run\n.delete table rasptb records with (whatif=true) <|\n    rasptb\n    | where (format_datetime(EventProcessedUtcTime, \"yyyy-MM-dd HH:mm:ss.fffffff\") startswith \"2025-01-16\")\n\n// actual execution\n.delete table rasptb records <|\n    rasptb\n    | where (format_datetime(EventProcessedUtcTime, \"yyyy-MM-dd HH:mm:ss.fffffff\") startswith \"2025-01-16\")\n\n\n\n// ------------------------------\n\n\n\n\nrasptb\n| project EventProcessedUtcTime, temperature, humidity\n\n\n// Use \"take\" to view a sample number of records in the table and check the data.\nrasptb\n| take 100\n\n// See how many records are in the table.\nrasptb\n| count\n\n// This query returns the number of ingestions per hour in the given table.\nrasptb\n| summarize IngestionCount = count() by bin(ingestion_time(), 1h)\n\n\n\n\n//***********************************************************************************************************\n// Here are two articles to help you get started with KQL:\n// KQL reference guide - https://aka.ms/KQLguide\n// SQL - KQL conversions - https://aka.ms/sqlcheatsheet\n//***********************************************************************************************************","commandInContext":"spintb\n| project-rename ['spintb.spin']=spin\n| project EventProcessedUtcTime, EventEnqueuedUtcTime, spin=round(todecimal(['spintb.spin']), int(2)), spinspike=iff((round(todecimal(['spintb.spin']), int(2)) > todouble(int(140))), int(1), int(0))\n\n","executionStatus":"done","clientRequestId":"Kusto.Web.RTA.QuerySet;ad99f93f-faa2-4c96-8e99-fe1e28ffd4d2;69563feb-285d-4454-bc19-ce5326962587","entityInContext":"-1399007225/d73a7a7d-c969-b495-4ca8-2d27046a98fe","commandType":"Query","commandWithoutLeadingComments":"spintb\n| project-rename ['spintb.spin']=spin\n| project EventProcessedUtcTime, EventEnqueuedUtcTime, spin=round(todecimal(['spintb.spin']), int(2)), spinspike=iff((round(todecimal(['spintb.spin']), int(2)) > todouble(int(140))), int(1), int(0))\n\n","hideEmptyColumns":false,"cursorPosition":{"lineNumber":35,"column":7}},{"id":"93ab9c7e-cb71-4f0e-8c15-4c9d95d5792b","queryRange":{"startLineNumber":1,"startColumn":1,"endLineNumber":4,"endColumn":1},"text":"spintb\n| project-rename ['spintb.spin']=spin\n| project EventProcessedUtcTime, EventEnqueuedUtcTime, spin=round(todecimal(['spintb.spin']), int(2)), spinspike=iff((round(todecimal(['spintb.spin']), int(2)) > todouble(int(140))), int(1), int(0))\n","commandInContext":"spintb\n| project-rename ['spintb.spin']=spin\n| project EventProcessedUtcTime, EventEnqueuedUtcTime, spin=round(todecimal(['spintb.spin']), int(2)), spinspike=iff((round(todecimal(['spintb.spin']), int(2)) > todouble(int(140))), int(1), int(0))\n","executionStatus":"gotFromCache","clientRequestId":"Kusto.Web.RTA.QuerySet;60d4df63-ff91-4035-924b-429aa5ed04f1;ef827cb4-4ab0-46f8-8db9-3de8acf84978","entityInContext":"-1399007225/d73a7a7d-c969-b495-4ca8-2d27046a98fe","commandType":"Query","commandWithoutLeadingComments":"spintb\n| project-rename ['spintb.spin']=spin\n| project EventProcessedUtcTime, EventEnqueuedUtcTime, spin=round(todecimal(['spintb.spin']), int(2)), spinspike=iff((round(todecimal(['spintb.spin']), int(2)) > todouble(int(140))), int(1), int(0))\n","hideEmptyColumns":false,"cursorPosition":{"lineNumber":4,"column":1}}],"tabInContext":"a0ab4745-4273-4498-b35e-41f549357c9c","connections":{"-1399007225":{"clusterType":"Engine","name":"-1399007225","connectionString":"","initialCatalog":"d73a7a7d-c969-b495-4ca8-2d27046a98fe","databases":{"-1399007225/d73a7a7d-c969-b495-4ca8-2d27046a98fe":{"id":"-1399007225/d73a7a7d-c969-b495-4ca8-2d27046a98fe","name":"d73a7a7d-c969-b495-4ca8-2d27046a98fe","prettyName":"iot_database","fetchState":"notStarted","fetchStateError":"","tables":{},"functions":{},"entityGroups":{},"accessMode":"ReadWrite","minorVersion":0,"majorVersion":93}},"id":"-1399007225","fetchState":"done","fetchStateError":"","tooBigToCache":true,"serviceOffering":"Trident"}}}}